#!/usr/bin/env ruby

#
# Copyright (c) 2013 by Lifted Studios. All Rights Reserved.
#

require 'fileutils'
require 'highline/import'
require 'octokit'
require 'trollop'

# Represents an error that occurs while executing a git command.
class GitError < StandardError
end

# Creates a client for accessing the GitHub API.
#
# @return [Octokit::Client] Client to use to access the API.
def client
  token = read_token
  Octokit::Client.new(access_token: token)
end

# Creates a restricted access token to use for future connections and stores it
# in the `.token` file.
#
# @return [nil]
def create_token
  puts 'Enter your GitHub credentials. They will be used to create an API access token for future '\
       'connections.'
  login = ask('Email Address: ')
  password = ask('Password: ') { |q| q.echo = '*' }

  client = Octokit::Client.new(login: login, password: password)
  token = client.create_authorization(note: 'line-length-miner',
                                      note_url: 'https://github.com/lee-dohm/line-length-miner')
  File.write(token_path, token.token)

  nil
end

# Executes a git command.
#
# @param [String] args Arguments to supply to git.
# @return [nil]
# @raise [GitError] If an error occurs while executing the command.
def git(args)
  raise GitError, "An error occurred executing: git #{args}" unless system("git #{args}")

  nil
end

# Parses the command line arguments.
#
# @return [Hash] Hash containing options describing the arguments.
def parse_arguments
  Trollop::options do
    opt :num_projects, 'Number of projects to mine', default: 10
    opt :verbose, 'Give verbose output'
  end
end

# Reads the token from the standard location.
#
# @return [String] Forty character token string.
def read_token
  create_token unless File.exists?(token_path)
  File.read(token_path)
end

# The root of where the example projects will be stored.
#
# @return [String] Path to the location in which to store the projects.
def root
  "#{ENV['HOME']}/dump"
end

# Splits the full project name into its two components: user name and project name.
#
# @param [String] name Full name of the project.
# @return [Array<String, String>] User name and project name of the project.
def split_project_name(name)
  name.split('/')
end

# Path where the access token should be stored.
#
# @return [String] Path to the token storage location.
def token_path
  File.expand_path('../../.token', __FILE__)
end

# Updates the local copy of the project code by either pulling the latest version of the code or
# cloning it from GitHub.
#
# @param [String] name Full name of the project.
# @return [nil]
def update_project(name)
  user, project = split_project_name(name)

  if Dir.exists?("#{root}/#{project}")
    FileUtils.cd("#{root}/#{project}") { git "pull" }
  else
    git "clone git@github.com:#{name}.git"
  end

  nil
end

options = parse_arguments

api = client
response = api.search_repos('language:ruby',
                            sort: 'stars',
                            order: 'desc',
                            page: 1,
                            per_page: options[:num_projects])

project_names = response.items.map { |item| item.full_name }
Dir.mkdir(root) unless Dir.exists?(root)

FileUtils.cd(root) do
  project_names.each do |name|
    update_project(name)
  end
end
