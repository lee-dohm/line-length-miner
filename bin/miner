#!/usr/bin/env ruby

#
# Copyright (c) 2013 by Lifted Studios. All Rights Reserved.
#

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'fileutils'
require 'log'
require 'octokit'
require 'token'
require 'trollop'

# Represents an error that occurs while executing a git command.
class GitError < StandardError
end

# Creates a client for accessing the GitHub API.
#
# @return [Octokit::Client] Client to use to access the API.
def client
  Octokit::Client.new(access_token: Token.create.to_s)
end

# Executes a git command.
#
# @param [String] args Arguments to supply to git.
# @return [nil]
# @raise [GitError] If an error occurs while executing the command.
def git(args)
  Log.d("Execute command: git #{args}")
  raise GitError, "An error occurred executing: git #{args}" unless system("git #{args}")

  nil
end

# Parses the command line arguments.
#
# @return [Hash] Hash containing options describing the arguments.
def parse_arguments
  Trollop::options do
    opt :debug, 'Enable debugging output'
    opt :num_projects, 'Number of projects to mine', default: 10
    opt :verbose, 'Enable verbose output'
  end
end

# The root of where the example projects will be stored.
#
# @return [String] Path to the location in which to store the projects.
def root
  "#{ENV['HOME']}/dump"
end

# Splits the full project name into its two components: user name and project name.
#
# @param [String] name Full name of the project.
# @return [Array<String, String>] User name and project name of the project.
def split_project_name(name)
  name.split('/')
end

# Updates the local copy of the project code by either pulling the latest version of the code or
# cloning it from GitHub.
#
# @param [String] name Full name of the project.
# @return [nil]
def update_project(name)
  user, project = split_project_name(name)

  if Dir.exists?("#{root}/#{project}")
    FileUtils.cd("#{root}/#{project}") { git "pull" }
  else
    git "clone git@github.com:#{name}.git"
  end

  nil
end

begin
  options = parse_arguments
  Log.level = Logger::INFO if options[:verbose]
  Log.level = Logger::DEBUG if options[:debug]

  api = client
  response = api.search_repos('language:ruby',
                              sort: 'stars',
                              order: 'desc',
                              page: 1,
                              per_page: options[:num_projects])

  project_names = response.items.map { |item| item.full_name }
  Dir.mkdir(root) unless Dir.exists?(root)

  FileUtils.cd(root) do
    project_names.each do |name|
      Log.i { "START Project: #{name}" }

      update_project(name)
      
      Log.i { "  END Project: #{name}" }
    end
  end
rescue Exception => e
  Log.f(e)
end
