#!/usr/bin/env ruby -w

#
# Copyright (c) 2013 by Lifted Studios. All Rights Reserved.
#

require 'fileutils'
require 'highline/import'
require 'octokit'

# Represents an error that occurs while executing a git command.
class GitError < StandardError
end

# Creates a client for accessing the GitHub API.
#
# @return [Octokit::Client] Client to use to access the API.
def client
  token = read_token
  Octokit::Client.new(access_token: token)
end

# Creates a restricted access token to use for future connections and stores it
# in the `.token` file.
#
# @return [nil]
def create_token
  puts 'Enter your GitHub credentials. They will be used to create an API access token for future connections.'
  login = ask('Email Address: ')
  password = ask('Password: ') { |q| q.echo = '*' }

  client = Octokit::Client.new(login: login, password: password)
  token = client.create_authorization(note: 'line-length-miner', note_url: 'https://github.com/lee-dohm/line-length-miner')
  File.write(token_path, token.token)

  nil
end

# Executes a git command.
#
# @param [String] args Arguments to supply to git.
# @return [nil]
# @raise [GitError] If an error occurs while executing the command.
def git(args)
  raise GitError, "An error occurred executing: git #{args}" unless system("git #{args}")

  nil
end

# Reads the token from the standard location.
#
# @return [String] Forty character token string.
def read_token
  create_token unless File.exists?(token_path)
  File.read(token_path)
end

# Path where the access token should be stored.
#
# @return [String] Path to the token storage location.
def token_path
  File.expand_path('../../.token', __FILE__)
end

api = client
response = api.search_repos('language:ruby', sort: 'stars', order: 'desc', page: 1, per_page: 10)
project_names = response.items.map { |item| item.full_name }
root = "#{ENV['HOME']}/dump"
Dir.mkdir(root) unless Dir.exists?(root)

FileUtils.cd(root) do
  project_names.each do |name|
    git "clone git@github.com:#{name}.git"
  end
end
